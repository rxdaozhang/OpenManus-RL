{'version': 1,
 'world': [{'name': 'at',
   'arguments': [{'name': 'P', 'type': 'P'}, {'name': 'r_0', 'type': 'r'}]},
  {'name': 'at',
   'arguments': [{'name': 'c_0', 'type': 'c'}, {'name': 'r_1', 'type': 'r'}]},
  {'name': 'at',
   'arguments': [{'name': 'c_1', 'type': 'c'}, {'name': 'r_4', 'type': 'r'}]},
  {'name': 'at',
   'arguments': [{'name': 's_0', 'type': 's'}, {'name': 'r_0', 'type': 'r'}]},
  {'name': 'at',
   'arguments': [{'name': 's_1', 'type': 's'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'at',
   'arguments': [{'name': 's_2', 'type': 's'}, {'name': 'r_5', 'type': 'r'}]},
  {'name': 'closed', 'arguments': [{'name': 'c_0', 'type': 'c'}]},
  {'name': 'closed', 'arguments': [{'name': 'c_1', 'type': 'c'}]},
  {'name': 'east_of',
   'arguments': [{'name': 'r_0', 'type': 'r'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'east_of',
   'arguments': [{'name': 'r_2', 'type': 'r'}, {'name': 'r_1', 'type': 'r'}]},
  {'name': 'east_of',
   'arguments': [{'name': 'r_3', 'type': 'r'}, {'name': 'r_5', 'type': 'r'}]},
  {'name': 'east_of',
   'arguments': [{'name': 'r_4', 'type': 'r'}, {'name': 'r_7', 'type': 'r'}]},
  {'name': 'east_of',
   'arguments': [{'name': 'r_5', 'type': 'r'}, {'name': 'r_4', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_0', 'type': 'r'}, {'name': 'r_2', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_0', 'type': 'r'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_1', 'type': 'r'}, {'name': 'r_2', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_1', 'type': 'r'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_2', 'type': 'r'}, {'name': 'r_0', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_2', 'type': 'r'}, {'name': 'r_1', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_3', 'type': 'r'}, {'name': 'r_0', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_3', 'type': 'r'}, {'name': 'r_1', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_3', 'type': 'r'}, {'name': 'r_5', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_4', 'type': 'r'}, {'name': 'r_5', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_4', 'type': 'r'}, {'name': 'r_6', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_4', 'type': 'r'}, {'name': 'r_7', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_5', 'type': 'r'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_5', 'type': 'r'}, {'name': 'r_4', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_6', 'type': 'r'}, {'name': 'r_4', 'type': 'r'}]},
  {'name': 'free',
   'arguments': [{'name': 'r_7', 'type': 'r'}, {'name': 'r_4', 'type': 'r'}]},
  {'name': 'in',
   'arguments': [{'name': 'o_5', 'type': 'o'}, {'name': 'c_0', 'type': 'c'}]},
  {'name': 'in',
   'arguments': [{'name': 'o_6', 'type': 'o'}, {'name': 'c_1', 'type': 'c'}]},
  {'name': 'north_of',
   'arguments': [{'name': 'r_0', 'type': 'r'}, {'name': 'r_2', 'type': 'r'}]},
  {'name': 'north_of',
   'arguments': [{'name': 'r_3', 'type': 'r'}, {'name': 'r_1', 'type': 'r'}]},
  {'name': 'north_of',
   'arguments': [{'name': 'r_6', 'type': 'r'}, {'name': 'r_4', 'type': 'r'}]},
  {'name': 'on',
   'arguments': [{'name': 'o_0', 'type': 'o'}, {'name': 's_1', 'type': 's'}]},
  {'name': 'on',
   'arguments': [{'name': 'o_1', 'type': 'o'}, {'name': 's_1', 'type': 's'}]},
  {'name': 'on',
   'arguments': [{'name': 'o_2', 'type': 'o'}, {'name': 's_0', 'type': 's'}]},
  {'name': 'on',
   'arguments': [{'name': 'o_3', 'type': 'o'}, {'name': 's_2', 'type': 's'}]},
  {'name': 'on',
   'arguments': [{'name': 'o_4', 'type': 'o'}, {'name': 's_2', 'type': 's'}]},
  {'name': 'south_of',
   'arguments': [{'name': 'r_1', 'type': 'r'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'south_of',
   'arguments': [{'name': 'r_2', 'type': 'r'}, {'name': 'r_0', 'type': 'r'}]},
  {'name': 'south_of',
   'arguments': [{'name': 'r_4', 'type': 'r'}, {'name': 'r_6', 'type': 'r'}]},
  {'name': 'west_of',
   'arguments': [{'name': 'r_1', 'type': 'r'}, {'name': 'r_2', 'type': 'r'}]},
  {'name': 'west_of',
   'arguments': [{'name': 'r_3', 'type': 'r'}, {'name': 'r_0', 'type': 'r'}]},
  {'name': 'west_of',
   'arguments': [{'name': 'r_4', 'type': 'r'}, {'name': 'r_5', 'type': 'r'}]},
  {'name': 'west_of',
   'arguments': [{'name': 'r_5', 'type': 'r'}, {'name': 'r_3', 'type': 'r'}]},
  {'name': 'west_of',
   'arguments': [{'name': 'r_7', 'type': 'r'}, {'name': 'r_4', 'type': 'r'}]}],
 'grammar': {'theme': 'house',
  'names_to_exclude': ['coffee cup',
   'garden',
   'fresh food',
   None,
   'office',
   'stale food',
   'chest',
   'plate',
   'fridge',
   'dining room',
   'utensils',
   'fruit',
   'living room',
   'table',
   'backyard',
   'bowl',
   'bedroom',
   'bathroom',
   'kitchen'],
  'include_adj': False,
  'blend_descriptions': True,
  'ambiguous_instructions': False,
  'only_last_action': False,
  'blend_instructions': False,
  'allowed_variables_numbering': False,
  'unique_expansion': False,
  'hide_location': True},
 'quests': [{'desc': "It's time to explore the amazing world of TextWorld! First, it would be great if you could try to go to the west. Next, pick up the stale food from the table. And then, head west. Then, venture west. And then, assure that the fridge is open. And then, put the stale food inside the fridge in the kitchen. After that, close the fridge inside the kitchen. Alright, thanks!",
   'reward': 1,
   'commands': ('go west',
    'take stale food from table',
    'go west',
    'go west',
    'open fridge',
    'insert stale food into fridge',
    'close fridge'),
   'win_events': [{'commands': ('go west',
      'take stale food from table',
      'go west',
      'go west',
      'open fridge',
      'insert stale food into fridge',
      'close fridge'),
     'actions': [{'name': 'go/west',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_0', 'type': 'r'}]},
        {'name': 'west_of',
         'arguments': [{'name': 'r_3', 'type': 'r'},
          {'name': 'r_0', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_0', 'type': 'r'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_3', 'type': 'r'},
          {'name': 'r_0', 'type': 'r'}]}],
       'postconditions': [{'name': 'west_of',
         'arguments': [{'name': 'r_3', 'type': 'r'},
          {'name': 'r_0', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_0', 'type': 'r'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_3', 'type': 'r'},
          {'name': 'r_0', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_3', 'type': 'r'}]}],
       'command_template': 'go west',
       'reverse_name': 'go/east',
       'reverse_command_template': 'go east'},
      {'name': 'take/s',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 's_1', 'type': 's'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'on',
         'arguments': [{'name': 'o_0', 'type': 'o'},
          {'name': 's_1', 'type': 's'}]}],
       'postconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 's_1', 'type': 's'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'in',
         'arguments': [{'name': 'o_0', 'type': 'o'},
          {'name': 'I', 'type': 'I'}]}],
       'command_template': 'take {o_0} from {s_1}',
       'reverse_name': 'put',
       'reverse_command_template': 'put {o_0} on {s_1}'},
      {'name': 'go/west',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'west_of',
         'arguments': [{'name': 'r_5', 'type': 'r'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_3', 'type': 'r'},
          {'name': 'r_5', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_5', 'type': 'r'},
          {'name': 'r_3', 'type': 'r'}]}],
       'postconditions': [{'name': 'west_of',
         'arguments': [{'name': 'r_5', 'type': 'r'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_3', 'type': 'r'},
          {'name': 'r_5', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_5', 'type': 'r'},
          {'name': 'r_3', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_5', 'type': 'r'}]}],
       'command_template': 'go west',
       'reverse_name': 'go/east',
       'reverse_command_template': 'go east'},
      {'name': 'go/west',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_5', 'type': 'r'}]},
        {'name': 'west_of',
         'arguments': [{'name': 'r_4', 'type': 'r'},
          {'name': 'r_5', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_5', 'type': 'r'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_4', 'type': 'r'},
          {'name': 'r_5', 'type': 'r'}]}],
       'postconditions': [{'name': 'west_of',
         'arguments': [{'name': 'r_4', 'type': 'r'},
          {'name': 'r_5', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_5', 'type': 'r'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'free',
         'arguments': [{'name': 'r_4', 'type': 'r'},
          {'name': 'r_5', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]}],
       'command_template': 'go west',
       'reverse_name': 'go/east',
       'reverse_command_template': 'go east'},
      {'name': 'open/c',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'c_1', 'type': 'c'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'closed', 'arguments': [{'name': 'c_1', 'type': 'c'}]}],
       'postconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'c_1', 'type': 'c'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'open', 'arguments': [{'name': 'c_1', 'type': 'c'}]}],
       'command_template': 'open {c_1}',
       'reverse_name': 'close/c',
       'reverse_command_template': 'close {c_1}'},
      {'name': 'insert',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'c_1', 'type': 'c'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'open', 'arguments': [{'name': 'c_1', 'type': 'c'}]},
        {'name': 'in',
         'arguments': [{'name': 'o_0', 'type': 'o'},
          {'name': 'I', 'type': 'I'}]}],
       'postconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'c_1', 'type': 'c'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'open', 'arguments': [{'name': 'c_1', 'type': 'c'}]},
        {'name': 'in',
         'arguments': [{'name': 'o_0', 'type': 'o'},
          {'name': 'c_1', 'type': 'c'}]}],
       'command_template': 'insert {o_0} into {c_1}',
       'reverse_name': 'take/c',
       'reverse_command_template': 'take {o_0} from {c_1}'},
      {'name': 'close/c',
       'preconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'c_1', 'type': 'c'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'open', 'arguments': [{'name': 'c_1', 'type': 'c'}]}],
       'postconditions': [{'name': 'at',
         'arguments': [{'name': 'P', 'type': 'P'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'at',
         'arguments': [{'name': 'c_1', 'type': 'c'},
          {'name': 'r_4', 'type': 'r'}]},
        {'name': 'closed', 'arguments': [{'name': 'c_1', 'type': 'c'}]}],
       'command_template': 'close {c_1}',
       'reverse_name': 'open/c',
       'reverse_command_template': 'open {c_1}'}],
     'condition': {'name': 'trigger',
      'preconditions': [{'name': 'at',
        'arguments': [{'name': 'P', 'type': 'P'},
         {'name': 'r_4', 'type': 'r'}]},
       {'name': 'at',
        'arguments': [{'name': 'c_1', 'type': 'c'},
         {'name': 'r_4', 'type': 'r'}]},
       {'name': 'closed', 'arguments': [{'name': 'c_1', 'type': 'c'}]}],
      'postconditions': [{'name': 'at',
        'arguments': [{'name': 'P', 'type': 'P'},
         {'name': 'r_4', 'type': 'r'}]},
       {'name': 'at',
        'arguments': [{'name': 'c_1', 'type': 'c'},
         {'name': 'r_4', 'type': 'r'}]},
       {'name': 'closed', 'arguments': [{'name': 'c_1', 'type': 'c'}]},
       {'name': 'event',
        'arguments': [{'name': 'P', 'type': 'P'},
         {'name': 'c_1', 'type': 'c'},
         {'name': 'r_4', 'type': 'r'}]}],
      'command_template': None,
      'reverse_name': None,
      'reverse_command_template': None}}],
   'fail_events': [],
   'optional': False,
   'repeatable': False}],
 'infos': [('P',
   {'id': 'P',
    'type': 'P',
    'name': None,
    'noun': None,
    'adj': None,
    'desc': None,
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('I',
   {'id': 'I',
    'type': 'I',
    'name': None,
    'noun': None,
    'adj': None,
    'desc': None,
    'room_type': None,
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_0',
   {'id': 'r_0',
    'type': 'r',
    'name': 'bedroom',
    'noun': None,
    'adj': None,
    'desc': " Oh wow! Is that what I think it is? It is! It's a table. [if there is something on the s_0]You see [a list of things on the s_0] on the table.[end if][if there is nothing on the s_0]But oh no! there's nothing on this piece of junk.[end if]\n\nThere are unguarded exits to the south and west.",
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_3',
   {'id': 'r_3',
    'type': 'r',
    'name': 'living room',
    'noun': None,
    'adj': None,
    'desc': " You see a table. [if there is something on the s_1]On the table you can make out [a list of things on the s_1].[end if][if there is nothing on the s_1]Unfortunately, there isn't a thing on it. Sometimes, just sometimes, TextWorld can just be the worst.[end if]\n\nThere are unguarded exits to the east, south and west.",
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_2',
   {'id': 'r_2',
    'type': 'r',
    'name': 'bathroom',
    'noun': None,
    'adj': None,
    'desc': '\n\nThere are unblocked exits to the north and west.',
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_1',
   {'id': 'r_1',
    'type': 'r',
    'name': 'office',
    'noun': None,
    'adj': None,
    'desc': ' You make out a chest.[if c_0 is open and there is something in the c_0] The chest contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The chest is empty, what a horrible day![end if]\n\nThere are unguarded exits to the east and north.',
    'room_type': 'clean',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_5',
   {'id': 'r_5',
    'type': 'r',
    'name': 'dining room',
    'noun': None,
    'adj': None,
    'desc': " You can make out a table. The table is normal.[if there is something on the s_2] On the table you can see [a list of things on the s_2]. There's something strange about this being here, but you can't put your finger on it.[end if][if there is nothing on the s_2] But oh no! there's nothing on this piece of trash. It would have been so cool if there was stuff on the table.[end if]\n\nThere are unguarded exits to the east and west.",
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_4',
   {'id': 'r_4',
    'type': 'r',
    'name': 'kitchen',
    'noun': None,
    'adj': None,
    'desc': ' You see [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] fridge.[if c_1 is open and there is something in the c_1] The fridge contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The fridge is empty, what a horrible day![end if]\n\nThere are unblocked exits to the east, north and west.',
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_7',
   {'id': 'r_7',
    'type': 'r',
    'name': 'backyard',
    'noun': None,
    'adj': None,
    'desc': '\n\nYou need an unblocked exit? You should try going east.',
    'room_type': 'work',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('r_6',
   {'id': 'r_6',
    'type': 'r',
    'name': 'garden',
    'noun': None,
    'adj': None,
    'desc': '\n\nThere is an unguarded exit to the south.',
    'room_type': 'storage',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('c_0',
   {'id': 'c_0',
    'type': 'c',
    'name': 'chest',
    'noun': None,
    'adj': None,
    'desc': 'The chest looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]',
    'room_type': 'clean',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('c_1',
   {'id': 'c_1',
    'type': 'c',
    'name': 'fridge',
    'noun': None,
    'adj': None,
    'desc': "The fridge looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]",
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('s_0',
   {'id': 's_0',
    'type': 's',
    'name': 'table',
    'noun': None,
    'adj': None,
    'desc': 'The table is unstable.',
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('s_1',
   {'id': 's_1',
    'type': 's',
    'name': 'table',
    'noun': None,
    'adj': None,
    'desc': 'The table is solidly built.',
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('s_2',
   {'id': 's_2',
    'type': 's',
    'name': 'table',
    'noun': None,
    'adj': None,
    'desc': 'The table is shaky.',
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_5',
   {'id': 'o_5',
    'type': 'o',
    'name': 'utensils',
    'noun': None,
    'adj': None,
    'desc': 'The utensils seems well matched to everything else here',
    'room_type': 'clean',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_6',
   {'id': 'o_6',
    'type': 'o',
    'name': 'fruit',
    'noun': None,
    'adj': None,
    'desc': 'The fruit is modern.',
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_0',
   {'id': 'o_0',
    'type': 'o',
    'name': 'stale food',
    'noun': None,
    'adj': None,
    'desc': 'The stale food is expensive looking.',
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_1',
   {'id': 'o_1',
    'type': 'o',
    'name': 'fresh food',
    'noun': None,
    'adj': None,
    'desc': 'The fresh food seems well matched to everything else here',
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_2',
   {'id': 'o_2',
    'type': 'o',
    'name': 'bowl',
    'noun': None,
    'adj': None,
    'desc': 'The bowl appears to be well matched to everything else here',
    'room_type': 'cook',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_3',
   {'id': 'o_3',
    'type': 'o',
    'name': 'coffee cup',
    'noun': None,
    'adj': None,
    'desc': 'The coffee cup is well-used.',
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None}),
  ('o_4',
   {'id': 'o_4',
    'type': 'o',
    'name': 'plate',
    'noun': None,
    'adj': None,
    'desc': 'The plate is modern.',
    'room_type': 'rest',
    'definite': None,
    'indefinite': None,
    'synonyms': None})],
 'KB': {'logic': '# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: "supporter";\n            definition :: "supporters are fixed in place.";\n        }\n\n        predicates {\n            on(o, s) :: "The {o} is on the {s}";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: "thing";\n        }\n\n        commands {\n            examine/t :: "examine {t}" :: "examining the {t}";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r\') = north_of(r\', r);\n        east_of(r, r\') = west_of(r\', r);\n\n        south_of/d(r, d, r\') = north_of/d(r\', d, r);\n        east_of/d(r, d, r\') = west_of/d(r\', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r\', r) & $free(r, r\') & $free(r\', r) -> at(P, r\');\n        go/south :: at(P, r) & $south_of(r\', r) & $free(r, r\') & $free(r\', r) -> at(P, r\');\n        go/east  :: at(P, r) & $east_of(r\', r) & $free(r, r\') & $free(r\', r) -> at(P, r\');\n        go/west  :: at(P, r) & $west_of(r\', r) & $free(r, r\') & $free(r\', r) -> at(P, r\');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r\') -> fail();\n        r2 :: at(s, r) & at(s, r\') -> fail();\n        r3 :: at(c, r) & at(c, r\') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r\') & north_of(r\'\', r\') -> fail();\n        nav_rr2 :: south_of(r, r\') & south_of(r\'\', r\') -> fail();\n        nav_rr3 :: east_of(r, r\') & east_of(r\'\', r\') -> fail();\n        nav_rr4 :: west_of(r, r\') & west_of(r\'\', r\') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r\') & south_of(r, r\') -> fail();\n        nav_rrB :: north_of(r, r\') & west_of(r, r\') -> fail();\n        nav_rrC :: north_of(r, r\') & east_of(r, r\') -> fail();\n        nav_rrD :: south_of(r, r\') & west_of(r, r\') -> fail();\n        nav_rrE :: south_of(r, r\') & east_of(r, r\') -> fail();\n        nav_rrF :: west_of(r, r\')  & east_of(r, r\') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: "room";\n        }\n\n        predicates {\n            at(P, r) :: "The player is in {r}";\n            at(t, r) :: "The {t} is in {r}";\n            free(r, r\') :: "";  # No equivalent in Inform7.\n\n            north_of(r, r\') :: "The {r} is mapped north of {r\'}";\n            south_of(r, r\') :: "The {r} is mapped south of {r\'}";\n            east_of(r, r\') :: "The {r} is mapped east of {r\'}";\n            west_of(r, r\') :: "The {r} is mapped west of {r\'}";\n\n            north_of/d(r, d, r\') :: "South of {r} and north of {r\'} is a door called {d}";\n            south_of/d(r, d, r\') :: "North of {r} and south of {r\'} is a door called {d}";\n            east_of/d(r, d, r\') :: "West of {r} and east of {r\'} is a door called {d}";\n            west_of/d(r, d, r\') :: "East of {r} and west of {r\'} is a door called {d}";\n        }\n\n        commands {\n            go/north :: "go north" :: "going north";\n            go/south :: "go south" :: "going south";\n            go/east :: "go east" :: "going east";\n            go/west :: "go west" :: "going west";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: "container";\n            definition :: "containers are openable, lockable and fixed in place. containers are usually closed.";\n        }\n\n        predicates {\n            open(c) :: "The {c} is open";\n            closed(c) :: "The {c} is closed";\n            locked(c) :: "The {c} is locked";\n\n            in(o, c) :: "The {o} is in the {c}";\n        }\n\n        commands {\n            open/c :: "open {c}" :: "opening the {c}";\n            close/c :: "close {c}" :: "closing the {c}";\n\n            lock/c :: "lock {c} with {k}" :: "locking the {c} with the {k}";\n            unlock/c :: "unlock {c} with {k}" :: "unlocking the {c} with the {k}";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k\', c) -> fail();\n        k2 :: match(k, c) & match(k, c\') -> fail();\n        k3 :: match(k, d) & match(k\', d) -> fail();\n        k4 :: match(k, d) & match(k, d\') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: "key";\n        }\n\n        predicates {\n            match(k, c) :: "The matching key of the {c} is the {k}";\n            match(k, d) :: "The matching key of the {d} is the {k}";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: "The player carries the {o}";\n        }\n\n        commands {\n            take :: "take {o}" :: "taking the {o}";\n            drop :: "drop {o}" :: "dropping the {o}";\n\n            take/c :: "take {o} from {c}" :: "removing the {o} from the {c}";\n            insert :: "insert {o} into {c}" :: "inserting the {o} into the {c}";\n\n            take/s :: "take {o} from {s}" :: "removing the {o} from the {s}";\n            put :: "put {o} on {s}" :: "putting the {o} on the {s}";\n\n            inventory :: "inventory" :: "taking inventory";\n\n            examine/I :: "examine {o}" :: "examining the {o}";\n            examine/s :: "examine {o}" :: "examining the {o}";\n            examine/c :: "examine {o}" :: "examining the {o}";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: "look" :: "looking";\n        }\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r\') -> fail();\n        obj8 :: in(o, c) & in(o, c\') -> fail();\n        obj9 :: on(o, s) & on(o, s\') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: "object-like";\n            definition :: "object-like is portable.";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: "food";\n            definition :: "food is edible.";\n        }\n\n        predicates {\n            edible(f) :: "The {f} is edible";\n            eaten(f) :: "The {f} is nowhere";\n        }\n\n        commands {\n            eat :: "eat {f}" :: "eating the {f}";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r\') & $link(r\', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r\') & $link(r\', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r\') & $link(r\', d, r) & closed(d) -> open(d) & free(r, r\') & free(r\', r);\n        close/d  :: $at(P, r) & $link(r, d, r\') & $link(r\', d, r) & open(d) & free(r, r\') & free(r\', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r\') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can\'t be used to link more than two rooms.\n        link1 :: link(r, d, r\') & link(r, d, r\'\') -> fail();\n        link2 :: link(r, d, r\') & link(r\'\', d, r\'\'\') -> fail();\n\n        # There\'s already a door linking two rooms.\n        link3 :: link(r, d, r\') & link(r, d\', r\') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r\') & free(r, r\') & closed(d) -> fail();\n        free2 :: link(r, d, r\') & free(r, r\') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: "door";\n            definition :: "door is openable and lockable.";\n        }\n\n        predicates {\n            open(d) :: "The {d} is open";\n            closed(d) :: "The {d} is closed";\n            locked(d) :: "The {d} is locked";\n            link(r, d, r\') :: "";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: "open {d}" :: "opening {d}";\n            close/d :: "close {d}" :: "closing {d}";\n\n            unlock/d :: "unlock {d} with {k}" :: "unlocking {d} with the {k}";\n            lock/d :: "lock {d} with {k}" :: "locking {d} with the {k}";\n\n            examine/d :: "examine {d}" :: "examining {d}";\n        }\n    }\n}\n\n',
  'text_grammars_path': '/Users/joey_hong/TextWorld/textworld/generator/data/text_grammars'},
 'metadata': {'walkthrough': ['go west', 'go west', 'go west'],
  'desc': 'Generated with textworld.GameMaker.'},
 'objective': "Welcome to another fast paced session of TextWorld! Here is your task for today. First of all, try to go to the west. Next, venture west. And then, try to go to the west. And if you do that, you're the winner!"}
